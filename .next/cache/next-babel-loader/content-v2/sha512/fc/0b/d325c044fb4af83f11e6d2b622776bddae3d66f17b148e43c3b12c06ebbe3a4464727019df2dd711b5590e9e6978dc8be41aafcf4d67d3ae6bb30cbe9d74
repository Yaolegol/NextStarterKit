{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { CustomIntl } from \"app/components/CustomIntl\";\nimport { Button } from \"common/components/Button\";\nimport { FormField } from \"common/components/FormField\";\nimport { Input } from \"common/components/Input\";\nimport { Layout } from \"common/components/Layout\";\nimport { actionLogin, actionRegistration } from \"modules/Auth/actions\";\nimport { actionGetUser } from \"modules/User/actions\";\nimport { Formik } from \"formik\";\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./index.less\";\n\nvar SignUp = function SignUp() {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  return /*#__PURE__*/React.createElement(CustomIntl, null, /*#__PURE__*/React.createElement(Layout, {\n    withFooter: false\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"signup-page\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"signup-page__content-container\"\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"signup-page__title\"\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"signup.title\"\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"signup-page__form\"\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      passwordConfirm: \"\"\n    },\n    onSubmit: function onSubmit(values, _ref) {\n      var setFieldError = _ref.setFieldError;\n      dispatch(actionRegistration({\n        data: values\n      })).then(function (_ref2) {\n        var errors = _ref2.errors;\n\n        if (!errors) {\n          dispatch(actionLogin({\n            data: values\n          })).then(function (_ref3) {\n            var errors = _ref3.errors;\n\n            if (!errors) {\n              dispatch(actionGetUser());\n              history.push(\"/\");\n            }\n          });\n        } else {\n          errors.forEach(function (_ref4) {\n            var key = _ref4.key,\n                message = _ref4.message;\n            setFieldError(key, message);\n          });\n        }\n      });\n    },\n    validate: function validate(values) {\n      var email = values.email,\n          password = values.password,\n          passwordConfirm = values.passwordConfirm;\n      var errors = {};\n\n      if (!email) {\n        errors.email = \"Required\";\n      }\n\n      if (!password) {\n        errors.password = \"Required\";\n      }\n\n      if (!passwordConfirm) {\n        errors.passwordConfirm = \"Required\";\n      }\n\n      if (passwordConfirm !== password) {\n        errors.passwordConfirm = \"Not match with password\";\n      }\n\n      return errors;\n    }\n  }, function (_ref5) {\n    var dirty = _ref5.dirty,\n        errors = _ref5.errors,\n        handleBlur = _ref5.handleBlur,\n        handleChange = _ref5.handleChange,\n        handleSubmit = _ref5.handleSubmit,\n        isValid = _ref5.isValid,\n        touched = _ref5.touched,\n        values = _ref5.values;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit\n    }, /*#__PURE__*/React.createElement(FormField, {\n      errorMessage: errors.email,\n      isError: errors.email,\n      isTouched: touched.email,\n      withMargin: false\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"email\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      placeholder: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"common.email\"\n      }),\n      type: \"email\",\n      value: values.email\n    })), /*#__PURE__*/React.createElement(FormField, {\n      errorMessage: errors.password,\n      isError: errors.password,\n      isTouched: touched.password\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"password\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      placeholder: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"common.password\"\n      }),\n      type: \"password\",\n      value: values.password\n    })), /*#__PURE__*/React.createElement(FormField, {\n      errorMessage: errors.passwordConfirm,\n      isError: errors.passwordConfirm,\n      isTouched: touched.passwordConfirm\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"passwordConfirm\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      placeholder: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"common.confirmPassword\"\n      }),\n      type: \"password\",\n      value: values.passwordConfirm\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signup-page__submit-button-container\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: !isValid || !dirty,\n      theme: \"white\",\n      type: \"submit\"\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"signup.signupButton\"\n    }))));\n  }))))));\n};\n\n_s(SignUp, \"FxNkVwM1QRg2/kU3+RDi4ll7EAM=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = SignUp;\nexport default SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["/home/oleg/PhpstormProjects/NextStarterKit/src/pages/signup/index.jsx"],"names":["SignUp","dispatch","useDispatch","history","useHistory","email","password","passwordConfirm","setFieldError","actionRegistration","data","values","errors","actionLogin","actionGetUser","key","message","dirty","handleBlur","handleChange","handleSubmit","isValid","touched"],"mappings":";;AACA,SAAA,UAAA,QAAA,2BAAA;AACA,SAAA,MAAA,QAAA,0BAAA;AACA,SAAA,SAAA,QAAA,6BAAA;AACA,SAAA,KAAA,QAAA,yBAAA;AACA,SAAA,MAAA,QAAA,0BAAA;AACA,SAAA,WAAA,EAAA,kBAAA,QAAA,sBAAA;AACA,SAAA,aAAA,QAAA,sBAAA;AACA,SAAA,MAAA,QAAA,QAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,gBAAA,QAAA,YAAA;AACA,SAAA,WAAA,QAAA,aAAA;AACA,SAAA,UAAA,QAAA,kBAAA;AACA,OAAA,cAAA;;AAGA,IAAMA,MAAM,GAAG,SAATA,MAAS,GAAkB;AAAA;;AAC7B,MAAMC,QAAQ,GAAGC,WAAjB,EAAA;AACA,MAAMC,OAAO,GAAGC,UAAhB,EAAA;AAEA,SAAA,aACI,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,IAAA,EAAA,aACA,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,UAAU,EAAE;AAApB,GAAA,EAAA,aACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAAA,aACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAAA,aACI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAI,IAAA,SAAS,EAAC;AAAd,GAAA,EAAA,aACI,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,IAAA,EAAE,EAAC;AAArB,GAAA,CADJ,CADJ,EAAA,aAII,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC;AAAf,GAAA,EAAA,aACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACI,IAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EADM,EAAA;AAEXC,MAAAA,QAAQ,EAFG,EAAA;AAGXC,MAAAA,eAAe,EAAE;AAHN,KADnB;AAMI,IAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,MAAA,EAAA,IAAA,EAA+B;AAAA,UAApBC,aAAoB,GAAA,IAAA,CAApBA,aAAoB;AACrCP,MAAAA,QAAQ,CACJQ,kBAAkB,CAAC;AAAEC,QAAAA,IAAI,EAAEC;AAAR,OAAD,CADd,CAARV,CAAAA,IAAAA,CAEO,UAAA,KAAA,EAAgB;AAAA,YAAbW,MAAa,GAAA,KAAA,CAAbA,MAAa;;AACnB,YAAI,CAAJ,MAAA,EAAa;AACTX,UAAAA,QAAQ,CACJY,WAAW,CAAC;AAAEH,YAAAA,IAAI,EAAEC;AAAR,WAAD,CADP,CAARV,CAAAA,IAAAA,CAEO,UAAA,KAAA,EAAgB;AAAA,gBAAbW,MAAa,GAAA,KAAA,CAAbA,MAAa;;AACnB,gBAAI,CAAJ,MAAA,EAAa;AACTX,cAAAA,QAAQ,CAACa,aAATb,EAAQ,CAARA;AACAE,cAAAA,OAAO,CAAPA,IAAAA,CAAAA,GAAAA;AACH;AANLF,WAAAA;AADJ,SAAA,MASO;AACHW,UAAAA,MAAM,CAANA,OAAAA,CAAe,UAAA,KAAA,EAAsB;AAAA,gBAAnBG,GAAmB,GAAA,KAAA,CAAnBA,GAAmB;AAAA,gBAAdC,OAAc,GAAA,KAAA,CAAdA,OAAc;AACjCR,YAAAA,aAAa,CAAA,GAAA,EAAbA,OAAa,CAAbA;AADJI,WAAAA;AAGH;AAhBLX,OAAAA;AAPR,KAAA;AA0BI,IAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,MAAA,EAAY;AAAA,UAEdI,KAFc,GAKdM,MALc,CAAA,KAAA;AAAA,UAGdL,QAHc,GAKdK,MALc,CAAA,QAAA;AAAA,UAIdJ,eAJc,GAKdI,MALc,CAAA,eAAA;AAMlB,UAAMC,MAAM,GAAZ,EAAA;;AACA,UAAI,CAAJ,KAAA,EAAY;AACRA,QAAAA,MAAM,CAANA,KAAAA,GAAAA,UAAAA;AACH;;AACD,UAAI,CAAJ,QAAA,EAAe;AACXA,QAAAA,MAAM,CAANA,QAAAA,GAAAA,UAAAA;AACH;;AACD,UAAI,CAAJ,eAAA,EAAsB;AAClBA,QAAAA,MAAM,CAANA,eAAAA,GAAAA,UAAAA;AACH;;AACD,UAAIL,eAAe,KAAnB,QAAA,EAAkC;AAC9BK,QAAAA,MAAM,CAANA,eAAAA,GAAAA,yBAAAA;AAEH;;AACD,aAAA,MAAA;AACH;AA/CL,GAAA,EAiDK,UAAA,KAAA,EASK;AAAA,QARFK,KAQE,GAAA,KAAA,CARFA,KAQE;AAAA,QAPFL,MAOE,GAAA,KAAA,CAPFA,MAOE;AAAA,QANFM,UAME,GAAA,KAAA,CANFA,UAME;AAAA,QALFC,YAKE,GAAA,KAAA,CALFA,YAKE;AAAA,QAJFC,YAIE,GAAA,KAAA,CAJFA,YAIE;AAAA,QAHFC,OAGE,GAAA,KAAA,CAHFA,OAGE;AAAA,QAFFC,OAEE,GAAA,KAAA,CAFFA,OAEE;AAAA,QADFX,MACE,GAAA,KAAA,CADFA,MACE;AACF,WAAA,aACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,QAAQ,EAAES;AAAhB,KAAA,EAAA,aACI,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACI,MAAA,YAAY,EAAER,MAAM,CADxB,KAAA;AAEI,MAAA,OAAO,EAAEA,MAAM,CAFnB,KAAA;AAGI,MAAA,SAAS,EAAEU,OAAO,CAHtB,KAAA;AAII,MAAA,UAAU,EAAE;AAJhB,KAAA,EAAA,aAMI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,MAAA,IAAI,EADR,OAAA;AAEI,MAAA,MAAM,EAFV,UAAA;AAGI,MAAA,QAAQ,EAHZ,YAAA;AAII,MAAA,WAAW,EAAA,aACP,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,QAAA,EAAE,EAAC;AAArB,OAAA,CALR;AAOI,MAAA,IAAI,EAPR,OAAA;AAQI,MAAA,KAAK,EAAEX,MAAM,CAACN;AARlB,KAAA,CANJ,CADJ,EAAA,aAkBI,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACI,MAAA,YAAY,EAAEO,MAAM,CADxB,QAAA;AAEI,MAAA,OAAO,EAAEA,MAAM,CAFnB,QAAA;AAGI,MAAA,SAAS,EAAEU,OAAO,CAAChB;AAHvB,KAAA,EAAA,aAKI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,MAAA,IAAI,EADR,UAAA;AAEI,MAAA,MAAM,EAFV,UAAA;AAGI,MAAA,QAAQ,EAHZ,YAAA;AAII,MAAA,WAAW,EAAA,aACP,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,QAAA,EAAE,EAAC;AAArB,OAAA,CALR;AAOI,MAAA,IAAI,EAPR,UAAA;AAQI,MAAA,KAAK,EAAEK,MAAM,CAACL;AARlB,KAAA,CALJ,CAlBJ,EAAA,aAkCI,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACI,MAAA,YAAY,EACRM,MAAM,CAFd,eAAA;AAII,MAAA,OAAO,EAAEA,MAAM,CAJnB,eAAA;AAKI,MAAA,SAAS,EAAEU,OAAO,CAACf;AALvB,KAAA,EAAA,aAOI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACI,MAAA,IAAI,EADR,iBAAA;AAEI,MAAA,MAAM,EAFV,UAAA;AAGI,MAAA,QAAQ,EAHZ,YAAA;AAII,MAAA,WAAW,EAAA,aACP,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,QAAA,EAAE,EAAC;AAArB,OAAA,CALR;AAOI,MAAA,IAAI,EAPR,UAAA;AAQI,MAAA,KAAK,EAAEI,MAAM,CAACJ;AARlB,KAAA,CAPJ,CAlCJ,EAAA,aAoDI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAC;AAAf,KAAA,EAAA,aACI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACI,MAAA,QAAQ,EAAE,CAAA,OAAA,IAAY,CAD1B,KAAA;AAEI,MAAA,KAAK,EAFT,OAAA;AAGI,MAAA,IAAI,EAAC;AAHT,KAAA,EAAA,aAKI,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,MAAA,EAAE,EAAC;AAArB,KAAA,CALJ,CADJ,CApDJ,CADJ;AApE5B,GASoB,CADJ,CAJJ,CADJ,CADJ,CADA,CADJ;AAJJ,CAAA;;GAAMP,M;UACeE,W,EACDE,U;;;KAFdJ,M;AAkJN,eAAA,MAAA","sourcesContent":["// @flow\nimport {CustomIntl} from \"app/components/CustomIntl\";\nimport { Button } from \"common/components/Button\";\nimport { FormField } from \"common/components/FormField\";\nimport { Input } from \"common/components/Input\";\nimport { Layout } from \"common/components/Layout\";\nimport { actionLogin, actionRegistration } from \"modules/Auth/actions\";\nimport { actionGetUser } from \"modules/User/actions\";\nimport { Formik } from \"formik\";\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./index.less\";\n\n\nconst SignUp = (): React$Node => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    return (\n        <CustomIntl>\n        <Layout withFooter={false}>\n            <div className=\"signup-page\">\n                <div className=\"signup-page__content-container\">\n                    <h1 className=\"signup-page__title\">\n                        <FormattedMessage id=\"signup.title\" />\n                    </h1>\n                    <div className=\"signup-page__form\">\n                        <Formik\n                            initialValues={{\n                                email: \"\",\n                                password: \"\",\n                                passwordConfirm: \"\",\n                            }}\n                            onSubmit={(values, { setFieldError }) => {\n                                dispatch(\n                                    actionRegistration({ data: values })\n                                ).then(({ errors }) => {\n                                    if (!errors) {\n                                        dispatch(\n                                            actionLogin({ data: values })\n                                        ).then(({ errors }) => {\n                                            if (!errors) {\n                                                dispatch(actionGetUser());\n                                                history.push(\"/\");\n                                            }\n                                        });\n                                    } else {\n                                        errors.forEach(({ key, message }) => {\n                                            setFieldError(key, message);\n                                        });\n                                    }\n                                });\n                            }}\n                            validate={(values) => {\n                                const {\n                                    email,\n                                    password,\n                                    passwordConfirm,\n                                } = values;\n                                const errors = {};\n                                if (!email) {\n                                    errors.email = \"Required\";\n                                }\n                                if (!password) {\n                                    errors.password = \"Required\";\n                                }\n                                if (!passwordConfirm) {\n                                    errors.passwordConfirm = \"Required\";\n                                }\n                                if (passwordConfirm !== password) {\n                                    errors.passwordConfirm =\n                                        \"Not match with password\";\n                                }\n                                return errors;\n                            }}\n                        >\n                            {({\n                                dirty,\n                                errors,\n                                handleBlur,\n                                handleChange,\n                                handleSubmit,\n                                isValid,\n                                touched,\n                                values,\n                            }) => {\n                                return (\n                                    <form onSubmit={handleSubmit}>\n                                        <FormField\n                                            errorMessage={errors.email}\n                                            isError={errors.email}\n                                            isTouched={touched.email}\n                                            withMargin={false}\n                                        >\n                                            <Input\n                                                name=\"email\"\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                placeholder={\n                                                    <FormattedMessage id=\"common.email\" />\n                                                }\n                                                type=\"email\"\n                                                value={values.email}\n                                            />\n                                        </FormField>\n                                        <FormField\n                                            errorMessage={errors.password}\n                                            isError={errors.password}\n                                            isTouched={touched.password}\n                                        >\n                                            <Input\n                                                name=\"password\"\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                placeholder={\n                                                    <FormattedMessage id=\"common.password\" />\n                                                }\n                                                type=\"password\"\n                                                value={values.password}\n                                            />\n                                        </FormField>\n                                        <FormField\n                                            errorMessage={\n                                                errors.passwordConfirm\n                                            }\n                                            isError={errors.passwordConfirm}\n                                            isTouched={touched.passwordConfirm}\n                                        >\n                                            <Input\n                                                name=\"passwordConfirm\"\n                                                onBlur={handleBlur}\n                                                onChange={handleChange}\n                                                placeholder={\n                                                    <FormattedMessage id=\"common.confirmPassword\" />\n                                                }\n                                                type=\"password\"\n                                                value={values.passwordConfirm}\n                                            />\n                                        </FormField>\n                                        <div className=\"signup-page__submit-button-container\">\n                                            <Button\n                                                disabled={!isValid || !dirty}\n                                                theme=\"white\"\n                                                type=\"submit\"\n                                            >\n                                                <FormattedMessage id=\"signup.signupButton\" />\n                                            </Button>\n                                        </div>\n                                    </form>\n                                );\n                            }}\n                        </Formik>\n                    </div>\n                </div>\n            </div>\n        </Layout>\n        </CustomIntl>\n    );\n};\n\nexport default SignUp;\n"]},"metadata":{},"sourceType":"module"}