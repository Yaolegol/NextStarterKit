{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { CART_ACTION_TYPES } from \"modules/Cart/constants\";\nvar initialState = {\n  products: {\n    total: 0,\n    items: {}\n  }\n};\nvar DECREMENT_PRODUCTS_COUNT = CART_ACTION_TYPES.DECREMENT_PRODUCTS_COUNT,\n    INCREMENT_PRODUCTS_COUNT = CART_ACTION_TYPES.INCREMENT_PRODUCTS_COUNT,\n    RESET_CART = CART_ACTION_TYPES.RESET_CART;\nexport var cartReducer = function cartReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var data = action.data,\n      type = action.type;\n\n  switch (type) {\n    case DECREMENT_PRODUCTS_COUNT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: _objectSpread(_objectSpread({}, state.products), {}, {\n          total: state.products.total - 1,\n          items: _objectSpread(_objectSpread({}, state.products.items), {}, _defineProperty({}, data.id, _objectSpread(_objectSpread({}, state.products.items[data.id]), {}, {\n            count: state.products.items[data.id] && state.products.items[data.id].count ? state.products.items[data.id].count - 1 : 0\n          })))\n        })\n      });\n\n    case INCREMENT_PRODUCTS_COUNT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: _objectSpread(_objectSpread({}, state.products), {}, {\n          total: state.products.total + 1,\n          items: _objectSpread(_objectSpread({}, state.products.items), {}, _defineProperty({}, data.id, _objectSpread(_objectSpread({}, state.products.items[data.id]), {}, {\n            count: state.products.items[data.id] && state.products.items[data.id].count ? state.products.items[data.id].count + 1 : 1\n          })))\n        })\n      });\n\n    case RESET_CART:\n      return initialState;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/oleg/PhpstormProjects/NextStarterKit/src/modules/Cart/reducer/index.jsx"],"names":["initialState","products","total","items","DECREMENT_PRODUCTS_COUNT","INCREMENT_PRODUCTS_COUNT","RESET_CART","CART_ACTION_TYPES","cartReducer","state","action","data","type","count"],"mappings":"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","sourcesContent":["// @flow\nimport { CART_ACTION_TYPES } from \"modules/Cart/constants\";\n\nconst initialState = {\n    products: {\n        total: 0,\n        items: {},\n    },\n};\n\nconst {\n    DECREMENT_PRODUCTS_COUNT,\n    INCREMENT_PRODUCTS_COUNT,\n    RESET_CART,\n} = CART_ACTION_TYPES;\n\nexport const cartReducer = (state: any = initialState, action: any): any => {\n    const { data, type } = action;\n\n    switch (type) {\n        case DECREMENT_PRODUCTS_COUNT:\n            return {\n                ...state,\n                products: {\n                    ...state.products,\n                    total: state.products.total - 1,\n                    items: {\n                        ...state.products.items,\n                        [data.id]: {\n                            ...state.products.items[data.id],\n                            count:\n                                state.products.items[data.id] &&\n                                state.products.items[data.id].count\n                                    ? state.products.items[data.id].count - 1\n                                    : 0,\n                        },\n                    },\n                },\n            };\n        case INCREMENT_PRODUCTS_COUNT:\n            return {\n                ...state,\n                products: {\n                    ...state.products,\n                    total: state.products.total + 1,\n                    items: {\n                        ...state.products.items,\n                        [data.id]: {\n                            ...state.products.items[data.id],\n                            count:\n                                state.products.items[data.id] &&\n                                state.products.items[data.id].count\n                                    ? state.products.items[data.id].count + 1\n                                    : 1,\n                        },\n                    },\n                },\n            };\n        case RESET_CART:\n            return initialState;\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}