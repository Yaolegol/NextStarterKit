{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { rootReducer } from 'app/reducer';\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nvar store;\n\nfunction initStore(initialState) {\n  return createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}\n\nexport var initializeStore = function initializeStore(preloadedState) {\n  var _store2;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/home/oleg/PhpstormProjects/NextStarterKit/src/app/store/index.jsx"],"names":["createStore","composeWithDevTools","applyMiddleware","initializeStore","_store","initStore","preloadedState","store","useMemo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAA,WAAA,QAAA,aAAA;AACA,SAAA,OAAA,QAAA,OAAA;AACA,SAAA,WAAA,EAAA,eAAA,QAAA,OAAA;AACA,SAAA,mBAAA,QAAA,0BAAA;AACA,OAAA,eAAA,MAAA,aAAA;AAEA,IAAA,KAAA;;AAEA,SAAA,SAAA,CAAA,YAAA,EAAiC;AAC7B,SAAOA,WAAW,CAAA,WAAA,EAAA,YAAA,EAGdC,mBAAmB,CAACC,eAAe,CAHvC,eAGuC,CAAhB,CAHL,CAAlB;AAKH;;AAED,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,cAAA,EAAoB;AAAA,MAAA,OAAA;;AAC/C,MAAIC,MAAM,GAAA,CAAA,OAAA,GAAA,KAAA,MAAA,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,GAAA,OAAA,GAAYC,SAAS,CADgB,cAChB,CAA/B,CAD+C,CAG/C;AACA;;;AACA,MAAIC,cAAc,IAAlB,KAAA,EAA6B;AACzBF,IAAAA,MAAM,GAAGC,SAAS,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACXE,KAAK,CADM,QACXA,EADW,CAAA,EADO,cACP,CAAA,CAAlBH,CADyB,CAKzB;;AACAG,IAAAA,KAAK,GAALA,SAAAA;AAX2C,GAAA,CAc/C;;;AACA,YAAmC,OAfY,MAeZ,CAfY,CAgB/C;;AACA,MAAI,CAAJ,KAAA,EAAYA,KAAK,GAALA,MAAAA;AAEZ,SAAA,MAAA;AAnBG,CAAA;AAsBP,OAAO,SAAA,QAAA,CAAA,YAAA,EAAgC;AACnC,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAA;AAAA,WAAML,eAAe,CAArB,YAAqB,CAArB;AAAD,GAAA,EAAsC,CAA3D,YAA2D,CAAtC,CAArB;AACA,SAAA,KAAA;AACH","sourcesContent":["// @flow\nimport {rootReducer} from 'app/reducer';\nimport { useMemo } from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nlet store\n\nfunction initStore(initialState) {\n    return createStore(\n        rootReducer,\n        initialState,\n        composeWithDevTools(applyMiddleware(thunkMiddleware))\n    )\n}\n\nexport const initializeStore = (preloadedState) => {\n    let _store = store ?? initStore(preloadedState)\n\n    // After navigating to a page with an initial Redux state, merge that state\n    // with the current state in the store, and create a new store\n    if (preloadedState && store) {\n        _store = initStore({\n            ...store.getState(),\n            ...preloadedState,\n        })\n        // Reset the current store\n        store = undefined\n    }\n\n    // For SSG and SSR always create a new store\n    if (typeof window === 'undefined') return _store\n    // Create the store once in the client\n    if (!store) store = _store\n\n    return _store\n}\n\nexport function useStore(initialState) {\n    const store = useMemo(() => initializeStore(initialState), [initialState])\n    return store\n}\n"]},"metadata":{},"sourceType":"module"}