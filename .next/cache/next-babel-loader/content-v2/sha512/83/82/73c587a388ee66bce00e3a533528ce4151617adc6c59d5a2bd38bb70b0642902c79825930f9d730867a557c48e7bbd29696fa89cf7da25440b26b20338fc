{"ast":null,"code":"import { CustomIntl } from \"app/components/CustomIntl\";\nimport cn from \"classnames\";\nimport { Button } from \"common/components/Button\";\nimport { FormField } from \"common/components/FormField\";\nimport { Input } from \"common/components/Input\";\nimport { Layout } from \"common/components/Layout\";\nimport { actionLogin } from \"modules/Auth/actions\";\nimport { actionGetUser } from \"modules/User/actions\";\nimport { Formik } from \"formik\";\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./index.less\";\n\nvar LogIn = function LogIn() {\n  var dispatch = useDispatch();\n  var history = useHistory();\n  return /*#__PURE__*/React.createElement(CustomIntl, null, /*#__PURE__*/React.createElement(Layout, {\n    withFooter: false\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login-page\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login-page__content-container\"\n  }, /*#__PURE__*/React.createElement(\"h1\", null, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"login.title\"\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"login-page__form\"\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: function onSubmit(values, _ref) {\n      var setFieldError = _ref.setFieldError;\n      dispatch(actionLogin({\n        data: values\n      })).then(function (_ref2) {\n        var errors = _ref2.errors;\n\n        if (!errors) {\n          dispatch(actionGetUser());\n          history.push(\"/\");\n        } else {\n          errors.forEach(function (_ref3) {\n            var key = _ref3.key,\n                message = _ref3.message;\n            setFieldError(key, message);\n          });\n        }\n      });\n    },\n    validate: function validate(values) {\n      var email = values.email,\n          password = values.password;\n      var errors = {};\n\n      if (!email) {\n        errors.email = \"Required\";\n      }\n\n      if (!password) {\n        errors.password = \"Required\";\n      }\n\n      return errors;\n    }\n  }, function (_ref4) {\n    var dirty = _ref4.dirty,\n        errors = _ref4.errors,\n        handleBlur = _ref4.handleBlur,\n        handleChange = _ref4.handleChange,\n        handleSubmit = _ref4.handleSubmit,\n        isValid = _ref4.isValid,\n        touched = _ref4.touched,\n        values = _ref4.values;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit\n    }, /*#__PURE__*/React.createElement(FormField, {\n      errorMessage: errors.email,\n      isError: errors.email,\n      isTouched: touched.email,\n      withMargin: false\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"email\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      placeholder: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"common.email\"\n      }),\n      type: \"email\",\n      value: values.email\n    })), /*#__PURE__*/React.createElement(FormField, {\n      errorMessage: errors.password,\n      isError: errors.password,\n      isTouched: touched.password\n    }, /*#__PURE__*/React.createElement(Input, {\n      name: \"password\",\n      onBlur: handleBlur,\n      onChange: handleChange,\n      placeholder: /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"common.password\"\n      }),\n      type: \"password\",\n      value: values.password\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: cn(\"login-page__common-error-container\", {\n        \"login-page__common-error-container_visible\": errors.common\n      })\n    }, errors.common), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-page__submit-button-container\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      disabled: !isValid || !dirty,\n      theme: \"white\",\n      type: \"submit\"\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"login.loginButton\"\n    }))));\n  }))))));\n};\n\nexport default LogIn;","map":{"version":3,"sources":["/home/oleg/PhpstormProjects/NextStarterKit/src/pages/login/index.jsx"],"names":["LogIn","dispatch","useDispatch","history","useHistory","email","password","setFieldError","actionLogin","data","values","errors","actionGetUser","key","message","dirty","handleBlur","handleChange","handleSubmit","isValid","touched","cn","common"],"mappings":"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","sourcesContent":["// @flow\nimport {CustomIntl} from \"app/components/CustomIntl\";\nimport cn from \"classnames\";\nimport {Button} from \"common/components/Button\";\nimport {FormField} from \"common/components/FormField\";\nimport {Input} from \"common/components/Input\";\nimport {Layout} from \"common/components/Layout\";\nimport {actionLogin} from \"modules/Auth/actions\";\nimport {actionGetUser} from \"modules/User/actions\";\nimport {Formik} from \"formik\";\nimport React from \"react\";\nimport {FormattedMessage} from \"react-intl\";\nimport {useDispatch} from \"react-redux\";\nimport {useHistory} from \"react-router-dom\";\nimport \"./index.less\";\n\nconst LogIn = (): React$Node => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    return (\n        <CustomIntl>\n            <Layout withFooter={false}>\n                <div className=\"login-page\">\n                    <div className=\"login-page__content-container\">\n                        <h1>\n                            <FormattedMessage id=\"login.title\"/>\n                        </h1>\n                        <div className=\"login-page__form\">\n                            <Formik\n                                initialValues={{\n                                    email: \"\",\n                                    password: \"\",\n                                }}\n                                onSubmit={(values, {setFieldError}) => {\n                                    dispatch(actionLogin({data: values})).then(\n                                        ({errors}) => {\n                                            if (!errors) {\n                                                dispatch(actionGetUser());\n                                                history.push(\"/\");\n                                            } else {\n                                                errors.forEach(\n                                                    ({key, message}) => {\n                                                        setFieldError(key, message);\n                                                    }\n                                                );\n                                            }\n                                        }\n                                    );\n                                }}\n                                validate={(values) => {\n                                    const {email, password} = values;\n                                    const errors = {};\n                                    if (!email) {\n                                        errors.email = \"Required\";\n                                    }\n                                    if (!password) {\n                                        errors.password = \"Required\";\n                                    }\n                                    return errors;\n                                }}\n                            >\n                                {({\n                                      dirty,\n                                      errors,\n                                      handleBlur,\n                                      handleChange,\n                                      handleSubmit,\n                                      isValid,\n                                      touched,\n                                      values,\n                                  }) => {\n                                    return (\n                                        <form onSubmit={handleSubmit}>\n                                            <FormField\n                                                errorMessage={errors.email}\n                                                isError={errors.email}\n                                                isTouched={touched.email}\n                                                withMargin={false}\n                                            >\n                                                <Input\n                                                    name=\"email\"\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    placeholder={\n                                                        <FormattedMessage id=\"common.email\"/>\n                                                    }\n                                                    type=\"email\"\n                                                    value={values.email}\n                                                />\n                                            </FormField>\n                                            <FormField\n                                                errorMessage={errors.password}\n                                                isError={errors.password}\n                                                isTouched={touched.password}\n                                            >\n                                                <Input\n                                                    name=\"password\"\n                                                    onBlur={handleBlur}\n                                                    onChange={handleChange}\n                                                    placeholder={\n                                                        <FormattedMessage id=\"common.password\"/>\n                                                    }\n                                                    type=\"password\"\n                                                    value={values.password}\n                                                />\n                                            </FormField>\n                                            <div\n                                                className={cn(\n                                                    \"login-page__common-error-container\",\n                                                    {\n                                                        \"login-page__common-error-container_visible\":\n                                                        errors.common,\n                                                    }\n                                                )}\n                                            >\n                                                {errors.common}\n                                            </div>\n                                            <div className=\"login-page__submit-button-container\">\n                                                <Button\n                                                    disabled={!isValid || !dirty}\n                                                    theme=\"white\"\n                                                    type=\"submit\"\n                                                >\n                                                    <FormattedMessage id=\"login.loginButton\"/>\n                                                </Button>\n                                            </div>\n                                        </form>\n                                    );\n                                }}\n                            </Formik>\n                        </div>\n                    </div>\n                </div>\n            </Layout>\n        </CustomIntl>\n    );\n};\n\nexport default LogIn;\n"]},"metadata":{},"sourceType":"module"}