{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CART_ACTION_TYPES } from \"modules/Cart/constants\";\nimport { buyProducts } from \"modules/Cart/service\";\nvar BUY_PRODUCTS_FAIL = CART_ACTION_TYPES.BUY_PRODUCTS_FAIL,\n    BUY_PRODUCTS_START = CART_ACTION_TYPES.BUY_PRODUCTS_START,\n    BUY_PRODUCTS_SUCCESS = CART_ACTION_TYPES.BUY_PRODUCTS_SUCCESS,\n    DECREMENT_PRODUCTS_COUNT = CART_ACTION_TYPES.DECREMENT_PRODUCTS_COUNT,\n    INCREMENT_PRODUCTS_COUNT = CART_ACTION_TYPES.INCREMENT_PRODUCTS_COUNT,\n    RESET_CART = CART_ACTION_TYPES.RESET_CART;\n\nvar actionBuyProductsFail = function actionBuyProductsFail(errors) {\n  return function (dispatch) {\n    dispatch({\n      data: errors,\n      type: BUY_PRODUCTS_FAIL\n    });\n  };\n};\n\nvar actionBuyProductsStart = function actionBuyProductsStart() {\n  return function (dispatch) {\n    dispatch({\n      type: BUY_PRODUCTS_START\n    });\n  };\n};\n\nvar actionBuyProductsSuccess = function actionBuyProductsSuccess(data) {\n  return function (dispatch) {\n    dispatch({\n      data: data,\n      type: BUY_PRODUCTS_SUCCESS\n    });\n  };\n};\n\nexport var actionBuyProducts = function actionBuyProducts(products) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var _yield$buyProducts, data, errors;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(actionBuyProductsStart());\n              _context.prev = 1;\n              _context.next = 4;\n              return buyProducts(products);\n\n            case 4:\n              _yield$buyProducts = _context.sent;\n              data = _yield$buyProducts.data;\n              errors = _yield$buyProducts.errors;\n\n              if (!errors) {\n                dispatch(actionBuyProductsSuccess(data));\n              } else {\n                dispatch(actionBuyProductsFail(errors));\n              }\n\n              return _context.abrupt(\"return\", {\n                data: data,\n                errors: errors\n              });\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch(actionBuyProductsFail([_context.t0]));\n              return _context.abrupt(\"return\", {\n                errors: _context.t0\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var actionDecCartProductsCount = function actionDecCartProductsCount(id) {\n  return function (dispatch, getState) {\n    dispatch({\n      data: {\n        id: id\n      },\n      type: DECREMENT_PRODUCTS_COUNT\n    });\n  };\n};\nexport var actionIncCartProductsCount = function actionIncCartProductsCount(id) {\n  return function (dispatch, getState) {\n    dispatch({\n      data: {\n        id: id\n      },\n      type: INCREMENT_PRODUCTS_COUNT\n    });\n  };\n};\nexport var actionResetCart = function actionResetCart() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: RESET_CART\n    });\n  };\n};","map":{"version":3,"sources":["/home/oleg/PhpstormProjects/NextStarterKit/src/modules/Cart/actions/index.jsx"],"names":["BUY_PRODUCTS_FAIL","BUY_PRODUCTS_START","BUY_PRODUCTS_SUCCESS","DECREMENT_PRODUCTS_COUNT","INCREMENT_PRODUCTS_COUNT","RESET_CART","CART_ACTION_TYPES","actionBuyProductsFail","dispatch","data","type","actionBuyProductsStart","actionBuyProductsSuccess","actionBuyProducts","errors","buyProducts","actionDecCartProductsCount","id","actionIncCartProductsCount","actionResetCart"],"mappings":"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","sourcesContent":["// @flow\nimport { CART_ACTION_TYPES } from \"modules/Cart/constants\";\nimport { buyProducts } from \"modules/Cart/service\";\n\nconst {\n    BUY_PRODUCTS_FAIL,\n    BUY_PRODUCTS_START,\n    BUY_PRODUCTS_SUCCESS,\n    DECREMENT_PRODUCTS_COUNT,\n    INCREMENT_PRODUCTS_COUNT,\n    RESET_CART,\n} = CART_ACTION_TYPES;\n\nconst actionBuyProductsFail = (errors) => (dispatch) => {\n    dispatch({ data: errors, type: BUY_PRODUCTS_FAIL });\n};\nconst actionBuyProductsStart = () => (dispatch) => {\n    dispatch({ type: BUY_PRODUCTS_START });\n};\nconst actionBuyProductsSuccess = (data) => (dispatch) => {\n    dispatch({ data, type: BUY_PRODUCTS_SUCCESS });\n};\n\nexport const actionBuyProducts = (products: any): any => async (\n    dispatch,\n    getState\n) => {\n    dispatch(actionBuyProductsStart());\n\n    try {\n        const { data, errors } = await buyProducts(products);\n\n        if (!errors) {\n            dispatch(actionBuyProductsSuccess(data));\n        } else {\n            dispatch(actionBuyProductsFail(errors));\n        }\n\n        return { data, errors };\n    } catch (error) {\n        dispatch(actionBuyProductsFail([error]));\n\n        return { errors: error };\n    }\n};\n\nexport const actionDecCartProductsCount = (id: any): any => (\n    dispatch,\n    getState\n) => {\n    dispatch({ data: { id }, type: DECREMENT_PRODUCTS_COUNT });\n};\n\nexport const actionIncCartProductsCount = (id: any): any => (\n    dispatch,\n    getState\n) => {\n    dispatch({ data: { id }, type: INCREMENT_PRODUCTS_COUNT });\n};\n\nexport const actionResetCart = (): any => (dispatch, getState) => {\n    dispatch({ type: RESET_CART });\n};\n"]},"metadata":{},"sourceType":"module"}