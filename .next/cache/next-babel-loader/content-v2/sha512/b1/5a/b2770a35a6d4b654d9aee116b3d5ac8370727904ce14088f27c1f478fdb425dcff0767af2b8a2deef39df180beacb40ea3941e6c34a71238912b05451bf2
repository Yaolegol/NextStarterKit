{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { rootReducer } from 'app/reducer';\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nvar store;\n\nfunction initStore(initialState) {\n  return createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}\n\nexport var initializeStore = function initializeStore(preloadedState) {\n  var _store2;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useStore, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/home/oleg/PhpstormProjects/NextStarterKit/src/app/store/index.jsx"],"names":["rootReducer","useMemo","createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","store","initStore","initialState","initializeStore","preloadedState","_store","getState","undefined","useStore"],"mappings":";;;;;;;;AACA,SAAQA,WAAR,QAA0B,aAA1B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAGA,IAAIC,KAAJ;;AAEA,SAASC,SAAT,CAAmBC,YAAnB,EAAiC;AAC7B,SAAON,WAAW,CACdF,WADc,EAEdQ,YAFc,EAGdJ,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAHL,CAAlB;AAKH;;AAED,OAAO,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,cAAD,EAAoB;AAAA;;AAC/C,MAAIC,MAAM,cAAGL,KAAH,6CAAYC,SAAS,CAACG,cAAD,CAA/B,CAD+C,CAG/C;AACA;;;AACA,MAAIA,cAAc,IAAIJ,KAAtB,EAA6B;AACzBK,IAAAA,MAAM,GAAGJ,SAAS,iCACXD,KAAK,CAACM,QAAN,EADW,GAEXF,cAFW,EAAlB,CADyB,CAKzB;;AACAJ,IAAAA,KAAK,GAAGO,SAAR;AACH,GAZ8C,CAc/C;;;AACA,aAAmC,OAAOF,MAAP,CAfY,CAgB/C;;AACA,MAAI,CAACL,KAAL,EAAYA,KAAK,GAAGK,MAAR;AAEZ,SAAOA,MAAP;AACH,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBN,YAAlB,EAAgC;AAAA;;AACnC,MAAMF,KAAK,GAAGL,OAAO,CAAC;AAAA,WAAMQ,eAAe,CAACD,YAAD,CAArB;AAAA,GAAD,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOF,KAAP;AACH;;GAHeQ,Q","sourcesContent":["// @flow\nimport {rootReducer} from 'app/reducer';\nimport { useMemo } from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\n\nlet store\n\nfunction initStore(initialState) {\n    return createStore(\n        rootReducer,\n        initialState,\n        composeWithDevTools(applyMiddleware(thunkMiddleware))\n    )\n}\n\nexport const initializeStore = (preloadedState) => {\n    let _store = store ?? initStore(preloadedState)\n\n    // After navigating to a page with an initial Redux state, merge that state\n    // with the current state in the store, and create a new store\n    if (preloadedState && store) {\n        _store = initStore({\n            ...store.getState(),\n            ...preloadedState,\n        })\n        // Reset the current store\n        store = undefined\n    }\n\n    // For SSG and SSR always create a new store\n    if (typeof window === 'undefined') return _store\n    // Create the store once in the client\n    if (!store) store = _store\n\n    return _store\n}\n\nexport function useStore(initialState) {\n    const store = useMemo(() => initializeStore(initialState), [initialState])\n    return store\n}\n"]},"metadata":{},"sourceType":"module"}