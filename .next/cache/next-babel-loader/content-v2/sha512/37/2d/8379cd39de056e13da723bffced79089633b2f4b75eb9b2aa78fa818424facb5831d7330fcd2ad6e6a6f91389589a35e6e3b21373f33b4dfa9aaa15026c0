{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { AUTH_ACTION_TYPES } from \"modules/Auth/constants\";\nimport { loginRequest, registrationRequest } from \"modules/Auth/service\";\nvar LOGIN_FAIL = AUTH_ACTION_TYPES.LOGIN_FAIL,\n    LOGIN_START = AUTH_ACTION_TYPES.LOGIN_START,\n    LOGIN_SUCCESS = AUTH_ACTION_TYPES.LOGIN_SUCCESS,\n    LOGOUT = AUTH_ACTION_TYPES.LOGOUT,\n    SIGNUP_FAIL = AUTH_ACTION_TYPES.SIGNUP_FAIL,\n    SIGNUP_START = AUTH_ACTION_TYPES.SIGNUP_START,\n    SIGNUP_SUCCESS = AUTH_ACTION_TYPES.SIGNUP_SUCCESS;\n\nvar actionLoginFail = function actionLoginFail(errors) {\n  return function (dispatch) {\n    dispatch({\n      data: errors,\n      type: LOGIN_FAIL\n    });\n  };\n};\n\nvar actionLoginStart = function actionLoginStart() {\n  return function (dispatch) {\n    dispatch({\n      type: LOGIN_START\n    });\n  };\n};\n\nvar actionLoginSuccess = function actionLoginSuccess(data) {\n  return function (dispatch) {\n    dispatch({\n      data: data,\n      type: LOGIN_SUCCESS\n    });\n  };\n};\n\nexport var actionLogin = function actionLogin(_ref) {\n  var userData = _ref.data;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var _yield$loginRequest, data, errors;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(actionLoginStart());\n              _context.prev = 1;\n              _context.next = 4;\n              return loginRequest({\n                data: userData\n              });\n\n            case 4:\n              _yield$loginRequest = _context.sent;\n              data = _yield$loginRequest.data;\n              errors = _yield$loginRequest.errors;\n\n              if (!errors) {\n                dispatch(actionLoginSuccess(data));\n                localStorage.setItem(\"token\", data.token);\n              } else {\n                dispatch(actionLoginFail({\n                  errors: errors\n                }));\n              }\n\n              return _context.abrupt(\"return\", {\n                data: data,\n                errors: errors\n              });\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch(actionLoginFail({\n                errors: _context.t0.message\n              }));\n              return _context.abrupt(\"return\", {\n                errors: [_context.t0.message]\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var actionLogout = function actionLogout() {\n  return function (dispatch, getState) {\n    localStorage.removeItem(\"token\");\n    window.location.href = \"/\";\n    dispatch({\n      type: LOGOUT\n    });\n  };\n};\n\nvar actionSignUpFail = function actionSignUpFail(errors) {\n  return function (dispatch) {\n    dispatch({\n      data: errors,\n      type: SIGNUP_FAIL\n    });\n  };\n};\n\nvar actionSignUpStart = function actionSignUpStart() {\n  return function (dispatch) {\n    dispatch({\n      type: SIGNUP_START\n    });\n  };\n};\n\nvar actionSignUpSuccess = function actionSignUpSuccess(data) {\n  return function (dispatch) {\n    dispatch({\n      data: data,\n      type: SIGNUP_SUCCESS\n    });\n  };\n};\n\nexport var actionRegistration = function actionRegistration(_ref3) {\n  var userData = _ref3.data;\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n      var _yield$registrationRe, data, errors;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch(actionSignUpStart());\n              _context2.prev = 1;\n              _context2.next = 4;\n              return registrationRequest({\n                data: userData\n              });\n\n            case 4:\n              _yield$registrationRe = _context2.sent;\n              data = _yield$registrationRe.data;\n              errors = _yield$registrationRe.errors;\n\n              if (!errors) {\n                dispatch(actionSignUpSuccess(data));\n              } else {\n                dispatch(actionSignUpFail({\n                  errors: errors\n                }));\n              }\n\n              return _context2.abrupt(\"return\", {\n                data: data,\n                errors: errors\n              });\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](1);\n              dispatch(actionSignUpFail({\n                errors: _context2.t0.message\n              }));\n              return _context2.abrupt(\"return\", {\n                errors: _context2.t0\n              });\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 11]]);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};","map":null,"metadata":{},"sourceType":"module"}