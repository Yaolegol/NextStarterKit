{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { CustomSelect } from \"common/components/CustomSelect\";\nimport { actionSetLocale } from \"modules/Locale/actions\";\nimport { selectCurrentLocale } from \"modules/Locale/selectors\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./index.less\";\nvar options = [{\n  label: \"En\",\n  value: \"en\"\n}, {\n  label: \"Ru\",\n  value: \"ru\"\n}];\nexport var LangSelect = function LangSelect() {\n  _s();\n\n  var currentLocale = useSelector(selectCurrentLocale);\n  var dispatch = useDispatch();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedOption = _useState2[0],\n      setSelectedOption = _useState2[1];\n\n  var onSelectChange = function onSelectChange(value) {\n    setSelectedOption(value);\n    dispatch(actionSetLocale(value.value));\n  };\n\n  useEffect(function () {\n    var localeOption = options.find(function (opt) {\n      return opt.value === currentLocale;\n    });\n    setSelectedOption(localeOption);\n  }, [currentLocale]);\n  return /*#__PURE__*/React.createElement(CustomSelect, {\n    components: {\n      IndicatorSeparator: null\n    },\n    onChange: onSelectChange,\n    options: options,\n    value: selectedOption\n  });\n};\n\n_s(LangSelect, \"+yNt0ELFHn/YHGeGl4ZMcNGVFF4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = LangSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"LangSelect\");","map":{"version":3,"sources":["/home/oleg/PhpstormProjects/NextStarterKit/src/modules/Locale/components/LangSelect/index.jsx"],"names":["options","label","value","LangSelect","currentLocale","useSelector","dispatch","useDispatch","selectedOption","setSelectedOption","useState","onSelectChange","actionSetLocale","useEffect","localeOption","opt","IndicatorSeparator"],"mappings":";;;AACA,SAAA,YAAA,QAAA,gCAAA;AACA,SAAA,eAAA,QAAA,wBAAA;AACA,SAAA,mBAAA,QAAA,0BAAA;AACA,OAAA,KAAA,IAAA,SAAA,EAAA,QAAA,QAAA,OAAA;AACA,SAAA,WAAA,EAAA,WAAA,QAAA,aAAA;AACA,OAAA,cAAA;AAEA,IAAMA,OAAO,GAAG,CACZ;AAAEC,EAAAA,KAAK,EAAP,IAAA;AAAeC,EAAAA,KAAK,EAAE;AAAtB,CADY,EAEZ;AAAED,EAAAA,KAAK,EAAP,IAAA;AAAeC,EAAAA,KAAK,EAAE;AAAtB,CAFY,CAAhB;AAKA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAkB;AAAA;;AACxC,MAAMC,aAAa,GAAGC,WAAW,CAAjC,mBAAiC,CAAjC;AACA,MAAMC,QAAQ,GAAGC,WAAjB,EAAA;;AAFwC,MAAA,SAAA,GAIIG,QAAQ,CAJZ,IAIY,CAJZ;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAIjCF,cAJiC,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAIjBC,iBAJiB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAKxC,MAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAA,KAAA,EAAW;AAC9BF,IAAAA,iBAAiB,CAAjBA,KAAiB,CAAjBA;AACAH,IAAAA,QAAQ,CAACM,eAAe,CAACV,KAAK,CAA9BI,KAAwB,CAAhB,CAARA;AAFJ,GAAA;;AAKAO,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMC,YAAY,GAAG,OAAO,CAAP,IAAA,CAAa,UAAA,GAAA,EAAA;AAAA,aAASC,GAAG,CAAHA,KAAAA,KAAT,aAAA;AAAlC,KAAqB,CAArB;AACAN,IAAAA,iBAAiB,CAAjBA,YAAiB,CAAjBA;AAFK,GAAA,EAGN,CAHHI,aAGG,CAHM,CAATA;AAKA,SAAA,aACI,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AACI,IAAA,UAAU,EAAE;AACRG,MAAAA,kBAAkB,EAAE;AADZ,KADhB;AAII,IAAA,QAAQ,EAJZ,cAAA;AAKI,IAAA,OAAO,EALX,OAAA;AAMI,IAAA,KAAK,EAAER;AANX,GAAA,CADJ;AAfG,CAAA;;GAAML,U;UACaE,W,EACLE,W;;;KAFRJ,U","sourcesContent":["// @flow\nimport { CustomSelect } from \"common/components/CustomSelect\";\nimport { actionSetLocale } from \"modules/Locale/actions\";\nimport { selectCurrentLocale } from \"modules/Locale/selectors\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./index.less\";\n\nconst options = [\n    { label: \"En\", value: \"en\" },\n    { label: \"Ru\", value: \"ru\" },\n];\n\nexport const LangSelect = (): React$Node => {\n    const currentLocale = useSelector(selectCurrentLocale);\n    const dispatch = useDispatch();\n\n    const [selectedOption, setSelectedOption] = useState(null);\n    const onSelectChange = (value) => {\n        setSelectedOption(value);\n        dispatch(actionSetLocale(value.value));\n    };\n\n    useEffect(() => {\n        const localeOption = options.find((opt) => opt.value === currentLocale);\n        setSelectedOption(localeOption);\n    }, [currentLocale]);\n\n    return (\n        <CustomSelect\n            components={{\n                IndicatorSeparator: null,\n            }}\n            onChange={onSelectChange}\n            options={options}\n            value={selectedOption}\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}