{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { USER_ACTION_TYPES } from \"modules/User/constants\";\nimport { getUser } from \"modules/User/service\";\nvar GET_USER_FAIL = USER_ACTION_TYPES.GET_USER_FAIL,\n    GET_USER_START = USER_ACTION_TYPES.GET_USER_START,\n    GET_USER_SUCCESS = USER_ACTION_TYPES.GET_USER_SUCCESS;\n\nvar actionGetUserFail = function actionGetUserFail(errors) {\n  return function (dispatch) {\n    dispatch({\n      data: errors,\n      type: GET_USER_FAIL\n    });\n  };\n};\n\nvar actionGetUserStart = function actionGetUserStart() {\n  return function (dispatch) {\n    dispatch({\n      type: GET_USER_START\n    });\n  };\n};\n\nvar actionGetUserSuccess = function actionGetUserSuccess(data) {\n  return function (dispatch) {\n    dispatch({\n      data: data,\n      type: GET_USER_SUCCESS\n    });\n  };\n};\n\nexport var actionGetUser = function actionGetUser() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var _yield$getUser, data, errors;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(actionGetUserStart());\n              _context.prev = 1;\n              _context.next = 4;\n              return getUser();\n\n            case 4:\n              _yield$getUser = _context.sent;\n              data = _yield$getUser.data;\n              errors = _yield$getUser.errors;\n\n              if (!errors) {\n                dispatch(actionGetUserSuccess(data));\n              } else {\n                dispatch(actionGetUserFail(errors));\n              }\n\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch(actionGetUserFail([_context.t0]));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/home/oleg/PhpstormProjects/NextStarterKit/src/modules/User/actions/index.jsx"],"names":["GET_USER_FAIL","GET_USER_START","GET_USER_SUCCESS","USER_ACTION_TYPES","actionGetUserFail","dispatch","data","type","actionGetUserStart","actionGetUserSuccess","actionGetUser","errors","getUser"],"mappings":";;AACA,SAAA,iBAAA,QAAA,wBAAA;AACA,SAAA,OAAA,QAAA,sBAAA;IAEQA,a,GAAoDG,iB,CAApDH,a;IAAeC,c,GAAqCE,iB,CAArCF,c;IAAgBC,gB,GAAqBC,iB,CAArBD,gB;;AAEvC,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,MAAA,EAAA;AAAA,SAAY,UAAA,QAAA,EAAc;AAChDC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAN,MAAA;AAAgBC,MAAAA,IAAI,EAAEP;AAAtB,KAAD,CAARK;AADsB,GAAA;AAA1B,CAAA;;AAGA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,GAAA;AAAA,SAAM,UAAA,QAAA,EAAc;AAC3CH,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAARI;AADuB,GAAA;AAA3B,CAAA;;AAGA,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,IAAA,EAAA;AAAA,SAAU,UAAA,QAAA,EAAc;AACjDJ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAN,IAAA;AAAQC,MAAAA,IAAI,EAAEL;AAAd,KAAD,CAARG;AADyB,GAAA;AAA7B,CAAA;;AAIA,OAAO,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,GAAA;AAAA,SAAA,aAAA,YAAA;AAAA,QAAA,IAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAW,SAAA,OAAA,CAAA,QAAA,EAAA,QAAA,EAAA;AAAA,UAAA,cAAA,EAAA,IAAA,EAAA,MAAA;;AAAA,aAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,eAAA,CAAA,EAAA;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,iBAAA,CAAA;AACpCL,cAAAA,QAAQ,CAACG,kBAATH,EAAQ,CAARA;AADoC,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,qBAIDO,OAJC,EAAA;;AAAA,iBAAA,CAAA;AAAA,cAAA,cAAA,GAAA,QAAA,CAAA,IAAA;AAIxBN,cAAAA,IAJwB,GAAA,cAAA,CAAA,IAIxBA;AAAMK,cAAAA,MAJkB,GAAA,cAAA,CAAA,MAIlBA;;AAEd,kBAAI,CAAJ,MAAA,EAAa;AACTN,gBAAAA,QAAQ,CAACI,oBAAoB,CAA7BJ,IAA6B,CAArB,CAARA;AADJ,eAAA,MAEO;AACHA,gBAAAA,QAAQ,CAACD,iBAAiB,CAA1BC,MAA0B,CAAlB,CAARA;AACH;;AAV+B,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,iBAAA,EAAA;AAAA,cAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,cAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;AAYhCA,cAAAA,QAAQ,CAACD,iBAAiB,CAAC,CAAA,QAAA,CAA3BC,EAA2B,CAAD,CAAlB,CAARA;;AAZgC,iBAAA,EAAA;AAAA,iBAAA,KAAA;AAAA,qBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAAX,KAAA,CAAA,CAAA;;AAAA,WAAA,UAAA,EAAA,EAAA,GAAA,EAAA;AAAA,aAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,KAAA;AAAA,GAAA,EAAA;AAAtB,CAAA","sourcesContent":["// @flow\nimport { USER_ACTION_TYPES } from \"modules/User/constants\";\nimport { getUser } from \"modules/User/service\";\n\nconst { GET_USER_FAIL, GET_USER_START, GET_USER_SUCCESS } = USER_ACTION_TYPES;\n\nconst actionGetUserFail = (errors) => (dispatch) => {\n    dispatch({ data: errors, type: GET_USER_FAIL });\n};\nconst actionGetUserStart = () => (dispatch) => {\n    dispatch({ type: GET_USER_START });\n};\nconst actionGetUserSuccess = (data) => (dispatch) => {\n    dispatch({ data, type: GET_USER_SUCCESS });\n};\n\nexport const actionGetUser = (): any => async (dispatch, getState) => {\n    dispatch(actionGetUserStart());\n\n    try {\n        const { data, errors } = await getUser();\n\n        if (!errors) {\n            dispatch(actionGetUserSuccess(data));\n        } else {\n            dispatch(actionGetUserFail(errors));\n        }\n    } catch (error) {\n        dispatch(actionGetUserFail([error]));\n    }\n};\n"]},"metadata":{},"sourceType":"module"}