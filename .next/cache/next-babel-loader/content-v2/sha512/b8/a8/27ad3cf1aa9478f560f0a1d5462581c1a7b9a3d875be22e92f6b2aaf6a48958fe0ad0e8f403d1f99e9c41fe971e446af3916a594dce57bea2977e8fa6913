{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { CART_ACTION_TYPES } from \"modules/Cart/constants\";\nvar initialState = {\n  products: {\n    total: 0,\n    items: {}\n  }\n};\nvar DECREMENT_PRODUCTS_COUNT = CART_ACTION_TYPES.DECREMENT_PRODUCTS_COUNT,\n    INCREMENT_PRODUCTS_COUNT = CART_ACTION_TYPES.INCREMENT_PRODUCTS_COUNT,\n    RESET_CART = CART_ACTION_TYPES.RESET_CART;\nexport var cartReducer = function cartReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var data = action.data,\n      type = action.type;\n\n  switch (type) {\n    case DECREMENT_PRODUCTS_COUNT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: _objectSpread(_objectSpread({}, state.products), {}, {\n          total: state.products.total - 1,\n          items: _objectSpread(_objectSpread({}, state.products.items), {}, _defineProperty({}, data.id, _objectSpread(_objectSpread({}, state.products.items[data.id]), {}, {\n            count: state.products.items[data.id] && state.products.items[data.id].count ? state.products.items[data.id].count - 1 : 0\n          })))\n        })\n      });\n\n    case INCREMENT_PRODUCTS_COUNT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: _objectSpread(_objectSpread({}, state.products), {}, {\n          total: state.products.total + 1,\n          items: _objectSpread(_objectSpread({}, state.products.items), {}, _defineProperty({}, data.id, _objectSpread(_objectSpread({}, state.products.items[data.id]), {}, {\n            count: state.products.items[data.id] && state.products.items[data.id].count ? state.products.items[data.id].count + 1 : 1\n          })))\n        })\n      });\n\n    case RESET_CART:\n      return initialState;\n\n    default:\n      return state;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}